{"version":3,"sources":["components/Persona/Persona.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAsBA,0GAA0G;IAC1G,IAAM,8BAA8B,GAAW,IAAI,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IAEjF;;;;;OAKG;IACH,IAAM,gCAAgC,GACpC,IAAI,MAAM,CACR,oJAAoJ,EACpJ,IAAI,CAAC,CAAC;IAEV,gGAAgG;IAChG,IAAM,gCAAgC,GAAW,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAE1E,yBAAyB;IACzB,IAAM,qBAAqB,GAA2B;QACpD,oCAAoB,CAAC,UAAU;QAC/B,oCAAoB,CAAC,SAAS;QAC9B,oCAAoB,CAAC,SAAS;QAC9B,oCAAoB,CAAC,KAAK;QAC1B,oCAAoB,CAAC,SAAS;QAC9B,oCAAoB,CAAC,SAAS;QAC9B,oCAAoB,CAAC,OAAO;QAC5B,oCAAoB,CAAC,MAAM;QAC3B,oCAAoB,CAAC,KAAK;QAC1B,oCAAoB,CAAC,IAAI;QACzB,oCAAoB,CAAC,IAAI;QACzB,oCAAoB,CAAC,QAAQ;QAC7B,oCAAoB,CAAC,MAAM;QAC3B,oCAAoB,CAAC,OAAO;QAC5B,oCAAoB,CAAC,GAAG;KACzB,CAAC;IAEF,IAAM,0BAA0B,GAAG,qBAAqB,CAAC,MAAM,CAAC;IAMhE;QAA6B,2BAA6C;QAOxE,iBAAY,KAAoB;YAAhC,YACE,kBAAM,KAAK,CAAC,SAKb;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK;aACrB,CAAC;;QACJ,CAAC;QAEM,wBAAM,GAAb;YACM,IAAA,eAaU,EAZZ,wBAAS,EACT,cAAI,EACJ,sBAAQ,EACR,gCAAa,EACb,gCAAa,EACb,sBAAQ,EACR,4BAAW,EACX,gCAAa,EACb,8BAAY,EACZ,8BAAY,EACZ,0CAAkB,EAClB,wCAAiB,CACJ;YAEf,IAAI,KAAK,GAAG,kBAAM,EAAE,CAAC;YAErB,aAAa,GAAG,aAAa,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACvE,aAAa,GAAG,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,GAAG,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAE5H,IAAI,eAAe,GAAG,IAAI,CAAC;YAC3B,EAAE,CAAC,CAAC,QAAQ,KAAK,+BAAe,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtC,IAAI,YAAY,GAAG,+BAAe,CAAC,QAAQ,CAAC,EAC1C,UAAU,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACrB,KAAK,QAAQ;wBACX,YAAY,GAAG,YAAY,CAAC;wBAC5B,KAAK,CAAC;oBACR,KAAK,MAAM;wBACT,YAAY,GAAG,YAAY,CAAC;wBAC5B,KAAK,CAAC;oBACR,KAAK,KAAK;wBACR,YAAY,GAAG,YAAY,CAAC;wBAC5B,KAAK,CAAC;oBACR;wBACE,YAAY,GAAG,EAAE,CAAC;gBACtB,CAAC;gBACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACjB,IAAI,SAAS,GAAG,8CAA4C,YAAc,CAAC;oBAC3E,UAAU,GAAG,2BAAG,SAAS,EAAG,SAAS,GAAO,CAAC;gBAC/C,CAAC;gBACD,eAAe,GAAG,6BAAK,SAAS,EAAC,qBAAqB,IAAG,UAAU,CAAQ,CAAC;YAC9E,CAAC;YAED,IAAI,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;YACzD,IAAI,cAAc,GAAG,6BAAK,SAAS,EAAC,oBAAoB;gBACtD,6BAAK,SAAS,EAAC,wBAAwB,IAAG,WAAW,CAAQ;gBAC3D,aAAa,GAAG,CAChB,6BAAK,SAAS,EAAC,0BAA0B,IAAG,aAAa,CAAQ,CAClE,GAAG,CAAC,IAAI,CAAC;gBACV,6BAAK,SAAS,EAAC,yBAAyB,IAAG,YAAY,CAAQ;gBAC/D,6BAAK,SAAS,EAAC,yBAAyB,IAAG,YAAY,CAAQ;gBAC7D,IAAI,CAAC,KAAK,CAAC,QAAQ,CACjB,CAAC;YAEP,MAAM,CAAC,CACL,wCAAU,QAAQ,IAAG,SAAS,EAAG,eAAG,CAAC,YAAY,EAAE,SAAS,EAAE,4BAAY,CAAC,IAAI,CAAC,EAAE,gCAAgB,CAAC,QAAQ,CAAC,CAAC;gBACzG,IAAI,KAAK,2BAAW,CAAC,IAAI,IAAI,CAC7B,6BAAK,SAAS,EAAC,sBAAsB;oBAEjC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa;wBACzB,CAAC,6BAAK,SAAS,EAAG,eAAG,CAAC,qBAAqB,EAAE,sCAAsB,CAAC,aAAa,CAAC,CAAC,IAAK,aAAa,CAAQ,CAAC;oBAEhH,oBAAC,aAAK,IACJ,SAAS,EAAC,kBAAkB,EAC5B,QAAQ,EAAG,gBAAQ,CAAC,KAAK,EACzB,GAAG,EAAG,QAAQ,EACd,YAAY,EAAG,iBAAiB,EAChC,oBAAoB,EAAG,IAAI,CAAC,0BAA0B,GAAK,CACzD,CACP;gBACC,eAAe;gBACf,CAAC,CAAC,kBAAkB,IAAI,CAAC,IAAI,KAAK,2BAAW,CAAC,IAAI,CAAC,CAAC,IAAI,cAAc,CACpE,CACP,CAAC;QACJ,CAAC;QAED,8EAA8E;QACtE,8BAAY,GAApB,UAAqB,WAAmB,EAAE,KAAc;YACtD,IAAI,QAAQ,GAAG,EAAE,CAAC;YAElB,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACxB,gFAAgF;gBAChF,IAAI,WAAW,GAAW,WAAW,CAAC,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC;gBAClF,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;gBACxE,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;gBAEzE,2CAA2C;gBAC3C,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;gBAEjC,IAAM,MAAM,GAAa,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAEhD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC9C,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBAChD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/B,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC9C,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBAChD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/B,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBAChD,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAEO,mCAAiB,GAAzB,UAA0B,WAAmB;YAC3C,IAAI,KAAK,GAAG,oCAAoB,CAAC,IAAI,CAAC;YACtC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,GAAG,CAAC,CAAC,IAAI,IAAI,GAAW,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;gBAClE,IAAM,EAAE,GAAW,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAM,KAAK,GAAW,IAAI,GAAG,CAAC,CAAC;gBAC/B,sCAAsC;gBACtC,QAAQ,IAAI,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YAClD,CAAC;YAED,KAAK,GAAG,qBAAqB,CAAC,QAAQ,GAAG,0BAA0B,CAAC,CAAC;YAErE,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAGO,4CAA0B,GAAlC,UAAmC,SAAyB;YAC1D,IAAI,CAAC,QAAQ,CAAC;gBACZ,aAAa,EAAE,SAAS,KAAK,sBAAc,CAAC,MAAM;aACnD,CAAC,CAAC;QACL,CAAC;QACH,cAAC;IAAD,CAvJA,AAuJC,CAvJ4B,KAAK,CAAC,SAAS;IAC5B,oBAAY,GAAkB;QAC1C,WAAW,EAAE,EAAE;QACf,IAAI,EAAE,2BAAW,CAAC,OAAO;QACzB,QAAQ,EAAE,+BAAe,CAAC,IAAI;KAC/B,CAAC;IA6IF;QADC,oBAAQ;6DAKR;IAtJU,0BAAO","file":"components/Persona/Persona.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  css,\r\n  divProperties,\r\n  getNativeProps,\r\n  getRTL\r\n} from '../../Utilities';\r\nimport { Image, ImageFit, ImageLoadState } from '../../Image';\r\nimport {\r\n  IPersonaProps,\r\n  PersonaInitialsColor,\r\n  PersonaPresence,\r\n  PersonaSize\r\n} from './Persona.Props';\r\nimport {\r\n  PERSONA_INITIALS_COLOR,\r\n  PERSONA_PRESENCE,\r\n  PERSONA_SIZE\r\n} from './PersonaConsts';\r\nimport './Persona.scss';\r\n\r\n/** Regex to detect words within paraenthesis in a string where gi implies global and case-insensitive. */\r\nconst CHARS_WITHIN_PARENTHESIS_REGEX: RegExp = new RegExp('\\\\(([^)]*)\\\\)', 'gi');\r\n\r\n/**\r\n *  Matches any non-word characters with respect to the Unicode codepoints; generated by\r\n * https://mothereff.in/regexpu for regex /\\W /u where u stands for Unicode support (ES6 feature).\r\n * More info here: http://stackoverflow.com/questions/280712/javascript-unicode-regexes.\r\n * gi implies global and case-insensitive.\r\n */\r\nconst UNICODE_ALPHANUMERIC_CHARS_REGEX =\r\n  new RegExp(\r\n    '(?:[\\0-/:-@\\[-\\^`\\{-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]) ',\r\n    'gi');\r\n\r\n/** Regex to detect multiple spaces in a string where gi implies global and case-insensitive. */\r\nconst MULTIPLE_WHITESPACES_REGEX_TOKEN: RegExp = new RegExp('\\\\s+', 'gi');\r\n\r\n// The RGB color swatches\r\nconst COLOR_SWATCHES_LOOKUP: PersonaInitialsColor[] = [\r\n  PersonaInitialsColor.lightGreen,\r\n  PersonaInitialsColor.lightBlue,\r\n  PersonaInitialsColor.lightPink,\r\n  PersonaInitialsColor.green,\r\n  PersonaInitialsColor.darkGreen,\r\n  PersonaInitialsColor.lightPink,\r\n  PersonaInitialsColor.magenta,\r\n  PersonaInitialsColor.purple,\r\n  PersonaInitialsColor.black,\r\n  PersonaInitialsColor.teal,\r\n  PersonaInitialsColor.blue,\r\n  PersonaInitialsColor.darkBlue,\r\n  PersonaInitialsColor.orange,\r\n  PersonaInitialsColor.darkRed,\r\n  PersonaInitialsColor.red\r\n];\r\n\r\nconst COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\r\n\r\nexport interface IPersonaState {\r\n  isImageLoaded?: boolean;\r\n}\r\n\r\nexport class Persona extends React.Component<IPersonaProps, IPersonaState> {\r\n  public static defaultProps: IPersonaProps = {\r\n    primaryText: '',\r\n    size: PersonaSize.regular,\r\n    presence: PersonaPresence.none\r\n  };\r\n\r\n  constructor(props: IPersonaProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isImageLoaded: false,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      className,\r\n      size,\r\n      imageUrl,\r\n      imageInitials,\r\n      initialsColor,\r\n      presence,\r\n      primaryText,\r\n      secondaryText,\r\n      tertiaryText,\r\n      optionalText,\r\n      hidePersonaDetails,\r\n      imageShouldFadeIn\r\n    } = this.props;\r\n\r\n    let isRTL = getRTL();\r\n\r\n    imageInitials = imageInitials || this._getInitials(primaryText, isRTL);\r\n    initialsColor = initialsColor !== undefined && initialsColor !== null ? initialsColor : this._getColorFromName(primaryText);\r\n\r\n    let presenceElement = null;\r\n    if (presence !== PersonaPresence.none) {\r\n      let userPresence = PersonaPresence[presence],\r\n        statusIcon = null;\r\n      switch (userPresence) {\r\n        case 'online':\r\n          userPresence = 'SkypeCheck';\r\n          break;\r\n        case 'away':\r\n          userPresence = 'SkypeClock';\r\n          break;\r\n        case 'dnd':\r\n          userPresence = 'SkypeMinus';\r\n          break;\r\n        default:\r\n          userPresence = '';\r\n      }\r\n      if (userPresence) {\r\n        let iconClass = `ms-Persona-presenceIcon ms-Icon ms-Icon--${userPresence}`;\r\n        statusIcon = <i className={ iconClass }></i>;\r\n      }\r\n      presenceElement = <div className='ms-Persona-presence'>{ statusIcon }</div>;\r\n    }\r\n\r\n    let divProps = getNativeProps(this.props, divProperties);\r\n    let personaDetails = <div className='ms-Persona-details'>\r\n      <div className='ms-Persona-primaryText'>{ primaryText }</div>\r\n      { secondaryText ? (\r\n        <div className='ms-Persona-secondaryText'>{ secondaryText }</div>\r\n      ) : (null) }\r\n      <div className='ms-Persona-tertiaryText'>{ tertiaryText }</div>\r\n      <div className='ms-Persona-optionalText'>{ optionalText }</div>\r\n      { this.props.children }\r\n    </div>;\r\n\r\n    return (\r\n      <div { ...divProps } className={ css('ms-Persona', className, PERSONA_SIZE[size], PERSONA_PRESENCE[presence]) }>\r\n        { size !== PersonaSize.tiny && (\r\n          <div className='ms-Persona-imageArea'>\r\n            {\r\n              !this.state.isImageLoaded &&\r\n              (<div className={ css('ms-Persona-initials', PERSONA_INITIALS_COLOR[initialsColor]) }>{ imageInitials }</div>)\r\n            }\r\n            <Image\r\n              className='ms-Persona-image'\r\n              imageFit={ ImageFit.cover }\r\n              src={ imageUrl }\r\n              shouldFadeIn={ imageShouldFadeIn }\r\n              onLoadingStateChange={ this._onPhotoLoadingStateChange } />\r\n          </div>\r\n        ) }\r\n        { presenceElement }\r\n        { (!hidePersonaDetails || (size === PersonaSize.tiny)) && personaDetails }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /** Get (up to 2 characters) initials based on display name of the persona. */\r\n  private _getInitials(displayName: string, isRtl: boolean): string {\r\n    let initials = '';\r\n\r\n    if (displayName != null) {\r\n      // Do not consider the suffixes within parenthesis while computing the initials.\r\n      let personaName: string = displayName.replace(CHARS_WITHIN_PARENTHESIS_REGEX, '');\r\n      personaName = personaName.replace(UNICODE_ALPHANUMERIC_CHARS_REGEX, '');\r\n      personaName = personaName.replace(MULTIPLE_WHITESPACES_REGEX_TOKEN, ' ');\r\n\r\n      // Trim leading and trailing spaces if any.\r\n      personaName = personaName.trim();\r\n\r\n      const splits: string[] = personaName.split(' ');\r\n\r\n      if (splits.length === 2) {\r\n        initials += splits[0].charAt(0).toUpperCase();\r\n        initials += splits[1].charAt(0).toUpperCase();\r\n      } else if (splits.length === 3) {\r\n        initials += splits[0].charAt(0).toUpperCase();\r\n        initials += splits[2].charAt(0).toUpperCase();\r\n      } else if (splits.length !== 0) {\r\n        initials += splits[0].charAt(0).toUpperCase();\r\n      }\r\n    }\r\n\r\n    if (isRtl && initials.length > 1) {\r\n      return initials.charAt(1) + initials.charAt(0);\r\n    }\r\n\r\n    return initials;\r\n  }\r\n\r\n  private _getColorFromName(displayName: string): PersonaInitialsColor {\r\n    let color = PersonaInitialsColor.blue;\r\n    if (!displayName) {\r\n      return color;\r\n    }\r\n\r\n    let hashCode = 0;\r\n    for (let iLen: number = displayName.length - 1; iLen >= 0; iLen--) {\r\n      const ch: number = displayName.charCodeAt(iLen);\r\n      const shift: number = iLen % 8;\r\n      // tslint:disable-next-line:no-bitwise\r\n      hashCode ^= (ch << shift) + (ch >> (8 - shift));\r\n    }\r\n\r\n    color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\r\n\r\n    return color;\r\n  }\r\n\r\n  @autobind\r\n  private _onPhotoLoadingStateChange(loadState: ImageLoadState) {\r\n    this.setState({\r\n      isImageLoaded: loadState === ImageLoadState.loaded\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}