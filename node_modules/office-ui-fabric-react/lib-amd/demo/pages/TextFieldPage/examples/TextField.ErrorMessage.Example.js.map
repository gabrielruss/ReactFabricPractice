{"version":3,"sources":["demo/pages/TextFieldPage/examples/TextField.ErrorMessage.Example.tsx"],"names":[],"mappings":";;;;;;;IAOA;QAAkD,gDAAuB;QACvE,sCAAmB,KAAU;YAA7B,YACE,kBAAM,KAAK,CAAC,SAIb;YAFC,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACzD,KAAI,CAAC,uBAAuB,GAAG,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QACzE,CAAC;QAEM,6CAAM,GAAb;YACE,MAAM,CAAC,CACL;gBACE,oBAAC,iBAAS,IACR,KAAK,EAAC,oGAAoG,EAC1G,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,GACvC;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,qGAAqG,EAC3G,iBAAiB,EAAG,IAAI,CAAC,uBAAuB,GAC9C;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,oGAAoG,EAC1G,KAAK,EAAC,qEAAqE,EAC3E,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,GACvC;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,qGAAqG,EAC3G,KAAK,EAAC,kFAAkF,EACxF,iBAAiB,EAAG,IAAI,CAAC,uBAAuB,GAC9C;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,mDAAmD,EACzD,KAAK,EAAC,0EAA0E,EAChF,WAAW,EAAC,wEAAwE,EACpF,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,GACvC;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,oGAAoG,EAC1G,WAAW,EAAC,8DAA8D,EAC1E,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,EACzC,sBAAsB,EAAG,IAAI,GAC3B;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,4GAA4G,EAClH,WAAW,EAAC,oDAAoD,EAChE,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,EACzC,iBAAiB,QACjB,kBAAkB,SAChB;gBACJ,oBAAC,iBAAS,IACR,KAAK,EAAC,kGAAkG,EACxG,WAAW,EAAC,2CAA2C,EACvD,iBAAiB,EAAG,IAAI,CAAC,gBAAgB,EACzC,kBAAkB,SAChB;gBACJ,oBAAC,iCAAe,IACd,KAAK,EAAC,2CAA2C,EACjD,YAAY,EAAC,KAAK,GAChB;gBACJ,oBAAC,iCAAe,IACd,KAAK,EAAC,6CAA6C,EACnD,YAAY,EAAC,cAAc,GACzB,CACA,CACP,CAAC;QACJ,CAAC;QAEO,uDAAgB,GAAxB,UAAyB,KAAa;YACpC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;kBACnB,EAAE;kBACF,iEAA+D,KAAK,CAAC,MAAM,MAAG,CAAC;QACrF,CAAC;QAEO,8DAAuB,GAA/B,UAAgC,KAAa;YAA7C,iBAKC;YAJC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO;gBACzB,sCAAsC;gBACtC,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAArC,CAAqC,EAAE,IAAI,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;QACL,CAAC;QACH,mCAAC;IAAD,CA9EA,AA8EC,CA9EiD,KAAK,CAAC,SAAS,GA8EhE;IA9EY,oEAA4B","file":"demo/pages/TextFieldPage/examples/TextField.ErrorMessage.Example.js","sourcesContent":["import 'es6-promise';\r\nimport * as React from 'react';\r\nimport {\r\n  TextField\r\n} from '../../../../index';\r\nimport { NumberTextField } from './NumberTextField';\r\n\r\nexport class TextFieldErrorMessageExample extends React.Component<{}, {}> {\r\n  public constructor(props: any) {\r\n    super(props);\r\n\r\n    this._getErrorMessage = this._getErrorMessage.bind(this);\r\n    this._getErrorMessagePromise = this._getErrorMessagePromise.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <TextField\r\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          />\r\n        <TextField\r\n          label='TextField with a Promise-based validator. Hint: the length of the input string must be less than 3.'\r\n          onGetErrorMessage={ this._getErrorMessagePromise }\r\n          />\r\n        <TextField\r\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\r\n          value='It should show an error message under this error message on render.'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          />\r\n        <TextField\r\n          label='TextField with a Promise-based validator. Hint: the length of the input string must be less than 3.'\r\n          value='It should show an error message under this error message 5 seconds after render.'\r\n          onGetErrorMessage={ this._getErrorMessagePromise }\r\n          />\r\n        <TextField\r\n          label='TextField has both description and error message.'\r\n          value='It should show description and error message on render at the same time.'\r\n          description='This field has description and error message both under the input box.'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          />\r\n        <TextField\r\n          label='TextField with a string-based validator. Hint: the length of the input string must be less than 3.'\r\n          placeholder='Validation will start after users stop typing for 2 seconds.'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          deferredValidationTime={ 2000 }\r\n          />\r\n        <TextField\r\n          label='TextField that validates only on focus and blur. Hint: the length of the input string must be less than 3.'\r\n          placeholder='Validation will start only on input focus and blur'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          validateOnFocusIn\r\n          validateOnFocusOut\r\n          />\r\n        <TextField\r\n          label='TextField that validates only on blur. Hint: the length of the input string must be less than 3.'\r\n          placeholder='Validation will start only on input blur.'\r\n          onGetErrorMessage={ this._getErrorMessage }\r\n          validateOnFocusOut\r\n          />\r\n        <NumberTextField\r\n          label='Number TextField with valid initial value'\r\n          initialValue='100'\r\n          />\r\n        <NumberTextField\r\n          label='Number TextField with invalid initial value'\r\n          initialValue='Not a number'\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getErrorMessage(value: string): string {\r\n    return value.length < 3\r\n      ? ''\r\n      : `The length of the input value should less than 3, actual is ${value.length}.`;\r\n  }\r\n\r\n  private _getErrorMessagePromise(value: string): Promise<string> {\r\n    return new Promise((resolve) => {\r\n      // resolve the promise after 3 second.\r\n      setTimeout(() => resolve(this._getErrorMessage(value)), 5000);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}