{"version":3,"sources":["demo/pages/ButtonPage/ButtonPage.tsx"],"names":[],"mappings":"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","file":"demo/pages/ButtonPage/ButtonPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  PropertiesTableSet,\r\n  ComponentPage\r\n} from '../../components/index';\r\n\r\nimport { Checkbox } from '../../../index';\r\n\r\nimport { ButtonDefaultExample } from './examples/Button.Default.Example';\r\nimport { ButtonPrimaryExample } from './examples/Button.Primary.Example';\r\nimport { ButtonCompoundExample } from './examples/Button.Compound.Example';\r\nimport { ButtonCommandExample } from './examples/Button.Command.Example';\r\nimport { ButtonIconExample } from './examples/Button.Icon.Example';\r\nimport { ButtonAnchorExample } from './examples/Button.Anchor.Example';\r\nimport { ButtonHeroExample } from './examples/Button.Hero.Example';\r\nimport { ButtonScreenReaderExample } from './examples/Button.ScreenReader.Example';\r\nimport { getPageRouteFromState } from '../../utilities/pageroute';\r\nimport { AppState } from '../../components/App/AppState';\r\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\r\nimport { IButtonDemoPageState } from './examples/IButtonDemoPageState';\r\nimport './examples/Button.Basic.Example.scss';\r\n\r\nconst ButtonDefaultExampleCode = require('./examples/Button.Default.Example.tsx') as string;\r\nconst ButtonPrimaryExampleCode = require('./examples/Button.Primary.Example.tsx') as string;\r\nconst ButtonCompoundExampleCode = require('./examples/Button.Compound.Example.tsx') as string;\r\nconst ButtonCommandExampleCode = require('./examples/Button.Command.Example.tsx') as string;\r\nconst ButtonHeroExampleCode = require('./examples/Button.Hero.Example.tsx') as string;\r\nconst ButtonIconExampleCode = require('./examples/Button.Icon.Example.tsx') as string;\r\nconst ButtonAnchorExampleCode = require('./examples/Button.Anchor.Example.tsx') as string;\r\nconst ButtonScreenReaderExampleCode = require('./examples/Button.ScreenReader.Example.tsx') as string;\r\n\r\nexport class ButtonPage extends React.Component<IComponentDemoPageProps, IButtonDemoPageState> {\r\n  private _url: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      areButtonsDisabled: false\r\n    };\r\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Button');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Button'\r\n        componentName='ButtonExample'\r\n        exampleCards={\r\n          <div>\r\n            <Checkbox label='Disable buttons' checked={ this.state.areButtonsDisabled } onChange={ this._onDisabledChanged.bind(this) } />\r\n            <ExampleCard title='Default Button' code={ ButtonDefaultExampleCode }>\r\n              <ButtonDefaultExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Primary Button' code={ ButtonPrimaryExampleCode }>\r\n              <ButtonPrimaryExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Hero Button' code={ ButtonHeroExampleCode }>\r\n              <ButtonHeroExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Compound Button' code={ ButtonCompoundExampleCode }>\r\n              <ButtonCompoundExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Command Button' code={ ButtonCommandExampleCode }>\r\n              <ButtonCommandExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Icon Button' code={ ButtonIconExampleCode }>\r\n              <ButtonIconExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button Like Anchor' code={ ButtonAnchorExampleCode }>\r\n              <ButtonAnchorExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button with Aria Description for Screen Reader' code={ ButtonScreenReaderExampleCode }>\r\n              <ButtonScreenReaderExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <div>\r\n            <PropertiesTableSet componentName='Button' />\r\n            <p>Besides the above properties, the <code>Button</code> component accepts all properties that the React <code>button</code> and <code>a</code> components accept.</p>\r\n          </div>\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.</p>\r\n            <p>When considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.</p>\r\n            <p>While buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.</p>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://dev.office.com/fabric-js/Components/Button/Button.html'>Fabric JS</a>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Make sure the label conveys a clear purpose of the button to the user.</li>\r\n              <li>Button labels must describe the action the button will perform and should include a verb. Use concise, specific, self-explanatory labels, usually a single word.</li>\r\n              <li>Buttons should always include a noun if there is any room for interpretation about what the verb operates on.</li>\r\n              <li>Consider the affect localization will have on the button and what will happen to components around it.</li>\r\n              <li>If the buttonâ€™s label content is dynamic, consider how the button will resize and what will happen to components around it.</li>\r\n              <li>Use only a single line of text in the label of the button.</li>\r\n              <li>Expose only one or two buttons to the user at a time, for example, \"Accept\" and \"Cancel\". If you need to expose more actions to the user, consider using checkboxes or radio buttons from which the user can select actions, with a single command button to trigger those actions.</li>\r\n              <li>Show only one primary button that inherits theme color at rest state. In the event there are more than two buttons with equal priority, all buttons should have neutral backgrounds.</li>\r\n              <li>\"Submit\", \"OK\", and \"Apply\" buttons should always be styled as primary buttons. When \"Reset\" or \"Cancel\" buttons appear alongside one of the above, they should be styled as secondary buttons.</li>\r\n              <li>Default buttons should always perform safe operations. For example, a default button should never delete.</li>\r\n              <li>Use task buttons to cause actions that complete a task or cause a transitional task. Do not use buttons to toggle other UX in the same context. For example, a button may be used to open an interface area but should not be used to open an additional set of components in the same interface.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use generic labels like \"Ok,\" especially in the case of an error; errors are never \"Ok.\"</li>\r\n              <li>Donâ€™t place the default focus on a button that destroys data. Instead, place the default focus on the button that performs the \"safe act\" and retains the content (i.e. \"Save\") or cancels the action (i.e. \"Cancel\").</li>\r\n              <li>Donâ€™t use a button to navigate to another place, use a link instead. The exception is in a wizard where \"Back\" and \"Next\" buttons may be used.</li>\r\n              <li>Donâ€™t put too much text in a button - try to keep the length of your text to a minimum.</li>\r\n              <li>Don't put anything other than text in a button.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        route={ this._url }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n\r\n  private _onDisabledChanged(ev: React.MouseEvent<HTMLElement>, disabled: boolean) {\r\n    this.setState({\r\n      areButtonsDisabled: disabled\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}