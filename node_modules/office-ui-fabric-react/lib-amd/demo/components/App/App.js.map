{"version":3,"sources":["demo/components/App/App.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAuBA,IAAa,GAAG;QAAS,uBAA+B;QAEtD,aAAY,KAAgB;YAA5B,YACE,kBAAM,KAAK,CAAC,SAQb;YANC,KAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK;aACrB,CAAC;YAEF,KAAI,CAAC,uBAAuB,GAAG,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACvE,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QACnD,CAAC;QAEM,oBAAM,GAAb;YACQ,IAAA,0CAAc,CAAgB;YAC9B,IAAA,wCAAa,CAAgB;YAEnC,IAAI,QAAQ,GAAG,CACb,oBAAC,SAAG,IAAC,MAAM,EAAG,mBAAQ,CAAC,YAAY,EAAG,WAAW,EAAG,IAAI,CAAC,YAAY,EAAG,YAAY,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC;oBAC/F,8BAAM,GAAG,EAAG,CAAC,EAAG,SAAS,EAAC,cAAc,IAAG,IAAI,CAAC,IAAI,CAAS;oBAC7D,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS;wBACxB,8BAAM,GAAG,EAAG,CAAC,EAAG,SAAS,EAAG,gBAAgB,GAAG,UAAU,GAAG,IAAI,CAAC,MAAM,IAAM,wBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAQ;wBAC/G,IAAI,CAAC;iBACR,CAAC,EAL8F,CAK9F,GACE,CACL,CAAC;YAEF,MAAM,CAAC,CACL,oBAAC,cAAM,IAAC,SAAS,EAAG,WAAG,CAAC,QAAQ,EAAE,UAAU,GAAG,mCAAc,CAAC,cAAc,CAAC,CAAC;gBAE5E,6BAAK,SAAS,EAAC,eAAe;oBAC5B,oBAAC,cAAM,IACL,KAAK,EAAG,mBAAQ,CAAC,QAAQ,EACzB,SAAS,EAAG,mBAAQ,CAAC,WAAW,EAChC,aAAa,EAAG,aAAa,EAC7B,sBAAsB,EAAG,IAAI,CAAC,uBAAuB,GACnD,CACA;gBAEJ,CAAC,cAAc,GAAG,mCAAc,CAAC,KAAK,CAAC,GAAG,CAC1C,6BAAK,SAAS,EAAC,YAAY,IACvB,QAAQ,CACN,CACP,GAAG,CAAC,IAAI,CAAC;gBAEV,6BAAK,SAAS,EAAC,gBAAgB,wBAAoB,MAAM,IACrD,IAAI,CAAC,KAAK,CAAC,QAAQ,CACjB;gBAEJ,CAAC,cAAc,IAAI,mCAAc,CAAC,KAAK,CAAC,GAAG,CAC3C,oBAAC,aAAK,IACJ,SAAS,EAAC,2BAA2B,EACrC,MAAM,EAAG,aAAa,EACtB,cAAc,EAAG,IAAI,EACrB,IAAI,EAAG,iBAAS,CAAC,cAAc,EAC/B,SAAS,EAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IACxD,QAAQ,CACJ,CACT,GAAG,CAAC,IAAI,CAAC,CACH,CACV,CAAC;QACJ,CAAC;QAEO,qCAAuB,GAA/B,UAAgC,aAAsB;YACpD,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,eAAA,EAAE,CAAC,CAAC;QACnC,CAAC;QAEO,0BAAY,GAApB;YACE,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1C,CAAC;QACH,UAAC;IAAD,CAtEA,AAsEC,CAtEwB,KAAK,CAAC,SAAS,GAsEvC;IAtEY,GAAG;QADf,uCAAkB;OACN,GAAG,CAsEf;IAtEY,kBAAG","file":"demo/components/App/App.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  css,\r\n  Fabric,\r\n  Panel,\r\n  PanelType\r\n} from '../../../index';\r\nimport {\r\n  Header\r\n} from '../index';\r\nimport { Nav } from '../../../Nav';\r\nimport { AppState, ExampleStatus } from './AppState';\r\nimport { withResponsiveMode, ResponsiveMode } from '../../../utilities/decorators/withResponsiveMode';\r\nimport './App.scss';\r\n\r\nexport interface IAppProps extends React.Props<App> {\r\n  responsiveMode?: ResponsiveMode;\r\n}\r\nexport interface IAppState {\r\n  isMenuVisible: boolean;\r\n}\r\n\r\n@withResponsiveMode\r\nexport class App extends React.Component<IAppProps, any> {\r\n\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMenuVisible: false\r\n    };\r\n\r\n    this._onIsMenuVisibleChanged = this._onIsMenuVisibleChanged.bind(this);\r\n    this._onLinkClick = this._onLinkClick.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    let { responsiveMode } = this.props;\r\n    let { isMenuVisible } = this.state;\r\n\r\n    let navPanel = (\r\n      <Nav groups={ AppState.examplePages } onLinkClick={ this._onLinkClick } onRenderLink={(link) => ([\r\n        <span key={ 1 } className='Nav-linkText'>{ link.name }</span>,\r\n        (link.status !== undefined ?\r\n          <span key={ 2 } className={ 'Nav-linkFlair ' + 'is-state' + link.status } >{ ExampleStatus[link.status]}</span> :\r\n          null)\r\n      ]) }\r\n        />\r\n    );\r\n\r\n    return (\r\n      <Fabric className={ css('ms-App', 'ms-App--' + ResponsiveMode[responsiveMode]) }>\r\n\r\n        <div className='ms-App-header'>\r\n          <Header\r\n            title={ AppState.appTitle }\r\n            sideLinks={ AppState.headerLinks }\r\n            isMenuVisible={ isMenuVisible }\r\n            onIsMenuVisibleChanged={ this._onIsMenuVisibleChanged }\r\n            />\r\n        </div>\r\n\r\n        { (responsiveMode > ResponsiveMode.large) ? (\r\n          <div className='ms-App-nav'>\r\n            { navPanel }\r\n          </div>\r\n        ) : (null) }\r\n\r\n        <div className='ms-App-content' data-is-scrollable='true'>\r\n          { this.props.children }\r\n        </div>\r\n\r\n        { (responsiveMode <= ResponsiveMode.large) ? (\r\n          <Panel\r\n            className='ms-App-navPanel ms-font-m'\r\n            isOpen={ isMenuVisible }\r\n            isLightDismiss={ true }\r\n            type={ PanelType.smallFixedNear }\r\n            onDismiss={ this._onIsMenuVisibleChanged.bind(this, false) }>\r\n            { navPanel }\r\n          </Panel>\r\n        ) : (null) }\r\n      </Fabric>\r\n    );\r\n  }\r\n\r\n  private _onIsMenuVisibleChanged(isMenuVisible: boolean) {\r\n    this.setState({ isMenuVisible });\r\n  }\r\n\r\n  private _onLinkClick() {\r\n    this.setState({ isMenuVisible: false });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}