{"version":3,"sources":["components/Button/Button.tsx"],"names":[],"mappings":"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","file":"components/Button/Button.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  assign,\r\n  getId,\r\n  getNativeProps,\r\n  buttonProperties,\r\n  anchorProperties\r\n} from '../../Utilities';\r\nimport { IButtonProps, IButton, ButtonType } from './Button.Props';\r\nimport './ButtonCore/ButtonCore.scss';\r\nimport './CommandButton/CommandButton.scss';\r\nimport './CompoundButton/CompoundButton.scss';\r\nimport './DefaultButton/DefaultButton.scss';\r\nimport './IconButton/IconButton.scss';\r\nimport './PrimaryButton/PrimaryButton.scss';\r\n\r\nexport interface IButtonState {\r\n  labelId?: string;\r\n  descriptionId?: string;\r\n  ariaDescriptionId?: string;\r\n}\r\n\r\nexport class Button extends BaseComponent<IButtonProps, IButtonState> implements IButton {\r\n  public static defaultProps: IButtonProps = {\r\n    buttonType: ButtonType.default\r\n  };\r\n  private _buttonElement: HTMLButtonElement;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props, { 'rootProps': null });\r\n\r\n    this.state = {\r\n      labelId: getId('Button'),\r\n      descriptionId: getId('Button'),\r\n      ariaDescriptionId: getId('Button')\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let { buttonType, children, icon, description, ariaLabel, ariaDescription, href, disabled, onClick } = this.props;\r\n    let { labelId, descriptionId, ariaDescriptionId } = this.state;\r\n\r\n    const renderAsAnchor: boolean = !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(this.props.rootProps || this.props, renderAsAnchor ? anchorProperties : buttonProperties);\r\n    const className = css((this.props.className), {\r\n      'ms-Button ms-Button--default': buttonType === ButtonType.default || buttonType === ButtonType.normal,\r\n      'ms-Button ms-Button--primary': buttonType === ButtonType.primary,\r\n      'ms-Button ms-Button--hero': buttonType === ButtonType.hero,\r\n      'ms-Button ms-Button--compound': buttonType === ButtonType.compound,\r\n      'ms-Button ms-Button--command': buttonType === ButtonType.command,\r\n      'ms-Button ms-Button--icon': buttonType === ButtonType.icon,\r\n      'disabled': (renderAsAnchor && disabled) // add disable styling if it is an anchor\r\n      // if not utilize default button disabled behavior.\r\n    });\r\n\r\n    const iconSpan = icon && (buttonType === ButtonType.command || buttonType === ButtonType.hero || buttonType === ButtonType.icon)\r\n      ? <span className='ms-Button-icon'><i className={ `ms-Icon ms-Icon--${icon}` }></i></span>\r\n      : null;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    const descriptionSpan: React.ReactElement<React.HTMLProps<HTMLSpanElement>> = description\r\n      ? <span className='ms-Button-description' id={ descriptionId }>{ description }</span>\r\n      : null;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    const ariaDescriptionSpan: React.ReactElement<React.HTMLProps<HTMLSpanElement>> = ariaDescription\r\n      ? <span className='ms-u-screenReaderOnly' id={ ariaDescriptionId }>{ ariaDescription }</span>\r\n      : null;\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = descriptionId;\r\n    } else if (nativeProps['aria-describedby']) {\r\n      ariaDescribedBy = nativeProps['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    if (buttonType === ButtonType.clean) {\r\n      return React.createElement(\r\n        tag,\r\n        assign(\r\n          {},\r\n          nativeProps,\r\n          href ? { href } : null,\r\n          {\r\n            'aria-label': ariaLabel,\r\n            'aria-labelledby': ariaLabel ? null : labelId,\r\n            'aria-describedby': ariaDescribedBy,\r\n            'ref': (c: HTMLButtonElement): HTMLButtonElement => this._buttonElement = c\r\n          },\r\n          onClick && { 'onClick': onClick },\r\n          disabled && { 'disabled': disabled },\r\n          { className }),\r\n        children,\r\n        ariaDescriptionSpan\r\n      );\r\n    }\r\n\r\n    return React.createElement(\r\n      tag,\r\n      assign(\r\n        {},\r\n        nativeProps,\r\n        href ? { href } : null,\r\n        {\r\n          'aria-label': ariaLabel,\r\n          'aria-labelledby': ariaLabel ? null : labelId,\r\n          'aria-describedby': ariaDescribedBy,\r\n          'ref': (c: HTMLButtonElement): HTMLButtonElement => this._buttonElement = c\r\n        },\r\n        onClick && { 'onClick': onClick },\r\n        disabled && { 'disabled': disabled },\r\n        { className }),\r\n      iconSpan,\r\n      <span className='ms-Button-label' id={ labelId } >{ children }</span>,\r\n      descriptionSpan,\r\n      ariaDescriptionSpan\r\n    );\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}