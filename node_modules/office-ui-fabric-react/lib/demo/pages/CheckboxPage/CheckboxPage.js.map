{"version":3,"sources":["demo/pages/CheckboxPage/CheckboxPage.tsx"],"names":[],"mappings":";;;;;;AAAA,6BAA+B;AAC/B,gDAIgC;AAEhC,4EAAyE;AACzE,uDAAkE;AAClE,0DAAyD;AAGzD,IAAM,wBAAwB,GAAG,OAAO,CAAC,uCAAuC,CAAW,CAAC;AAE5F;IAAkC,gCAA6C;IAG7E;QAAA,YACE,iBAAO,SAER;QADC,KAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;;IAC9E,CAAC;IAEM,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,qBAAa,IACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV,oBAAC,mBAAW,IAAC,KAAK,EAAC,YAAY,EAAC,IAAI,EAAG,wBAAwB;gBAC7D,oBAAC,6CAAoB,OAAG,CACZ,EAEhB,gBAAgB,EACd,oBAAC,0BAAkB,IAAC,aAAa,EAAC,UAAU,GAAG,EAEjD,QAAQ,EACN;gBACE,sSAEI;gBAEJ,qPAEI;gBAEJ,uKAEI;gBAEJ,oYAEI;gBAEJ,uLAEI,CACA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;gBACE;oBACE,iIAAuG,CACpG,CACD,EAER,KAAK,EACH;gBACE;oBACE,0GAAgF;oBAChF,gJAAiH;oBACjH,8HAAoG,CACjG,CACD,EAER,OAAO,EACL,2BAAG,IAAI,EAAC,oEAAoE,gBAAc,EAE5F,KAAK,EAAG,IAAI,CAAC,IAAI,EACjB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAvEA,AAuEC,CAvEiC,KAAK,CAAC,SAAS,GAuEhD;AAvEY,oCAAY","file":"demo/pages/CheckboxPage/CheckboxPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  PropertiesTableSet,\r\n  ComponentPage\r\n} from '../../components/index';\r\n\r\nimport { CheckboxBasicExample } from './examples/Checkbox.Basic.Example';\r\nimport { getPageRouteFromState } from '../../utilities/pageroute';\r\nimport { AppState } from '../../components/App/AppState';\r\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\r\n\r\nconst CheckboxBasicExampleCode = require('./examples/Checkbox.Basic.Example.tsx') as string;\r\n\r\nexport class CheckboxPage extends React.Component<IComponentDemoPageProps, any> {\r\n  private _url: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Checkbox');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Checkbox'\r\n        componentName='CheckboxExample'\r\n        exampleCards={\r\n          <ExampleCard title='Checkboxes' code={ CheckboxBasicExampleCode }>\r\n            <CheckboxBasicExample />\r\n          </ExampleCard>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet componentName='Checkbox' />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              A Checkbox is a UI element that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap. It can also be used to indicate a subordinate setting or preference when paired with another control.\r\n            </p>\r\n\r\n            <p>\r\n              A Checkbox is used to select or deselect action items. It can be used for a single item or for a list of multiple items that a user can choose from. The control has two selection states: unselected and selected.\r\n            </p>\r\n\r\n            <p>\r\n              Use a single Checkbox for a subordinate setting, such as with a \"Remember me?\" login scenario or with a terms of service agreement.\r\n            </p>\r\n\r\n            <p>\r\n              For a binary choice, the main difference between a Checkbox and a toggle switch is that the Checkbox is for status and the toggle switch is for action. You can delay committing a Checkbox interaction (as part of a form submit, for example), while you should immediately commit a toggle switch interaction. Also, only Checkboxes allow for multi-selection.\r\n            </p>\r\n\r\n            <p>\r\n              Use multiple Checkboxes for multi-select scenarios in which a user chooses one or more items from a group of choices that are not mutually exclusive.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Allow users to choose any combination of options when several Checkboxes are grouped together.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use a Checkbox as an on/off control. Instead use a toggle switch.</li>\r\n              <li>Donâ€™t use a Checkbox when the user can choose only one option from the group, use radio buttons instead.</li>\r\n              <li>Don't put two groups of Checkboxes next to each other. Separate the two groups with labels.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://dev.office.com/fabric-js/Components/CheckBox/CheckBox.html'>Fabric JS</a>\r\n        }\r\n        route={ this._url }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}