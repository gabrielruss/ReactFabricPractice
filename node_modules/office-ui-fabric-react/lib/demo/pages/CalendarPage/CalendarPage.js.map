{"version":3,"sources":["demo/pages/CalendarPage/CalendarPage.tsx"],"names":[],"mappings":";;;;;;AAAA,6BAA+B;AAC/B,gDAIgC;AAEhC,8EAA2E;AAC3E,8EAA2E;AAC3E,uDAAkE;AAClE,0DAAyD;AAGzD,IAAM,yBAAyB,GAAG,OAAO,CAAC,wCAAwC,CAAW,CAAC;AAC9F,IAAM,yBAAyB,GAAG,OAAO,CAAC,wCAAwC,CAAW,CAAC;AAE9F;IAAkC,gCAA6C;IAG7E;QAAA,YACE,iBAAO,SAER;QADC,KAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,YAAY,CAAC,CAAC;;IAChF,CAAC;IACM,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,qBAAa,IACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV;gBACE,oBAAC,mBAAW,IAAC,KAAK,EAAC,iBAAiB,EAAC,IAAI,EAAG,yBAAyB;oBACnE,oBAAC,+CAAqB,IAAC,oBAAoB,EAAG,KAAK,GAAK,CAC5C;gBACd,oBAAC,mBAAW,IAAC,KAAK,EAAC,mCAAmC,EAAC,IAAI,EAAG,yBAAyB;oBACrF,oBAAC,+CAAqB,IAAC,oBAAoB,EAAG,IAAI,GAAK,CAC3C;gBACd,oBAAC,mBAAW,IAAC,KAAK,EAAC,iCAAiC,EAAC,IAAI,EAAG,yBAAyB;oBACnF,oBAAC,+CAAqB,OAAG,CACb,CACV,EAER,gBAAgB,EACd,oBAAC,0BAAkB,IAAC,aAAa,EAAC,UAAU,GAAG,EAEjD,QAAQ,EACN;gBACE,0HAEI,CACA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;gBACE;oBACE,sEAA4C;oBAC5C,6JAAmI;oBACnI,oKAA0I;oBAC1I,uMAAwK;oBACxK,sKAA4I,CACzI,CACD,EAER,KAAK,EACH;gBACE;oBACE,yKAA+I;oBAC/I,wFAA8D;oBAC9D,+GAAqF;oBACrF,yHAA+F,CAC5F,CACD,EAER,KAAK,EAAG,IAAI,CAAC,IAAI,EACjB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;IACJ,CAAC;IAEH,mBAAC;AAAD,CAjEA,AAiEC,CAjEiC,KAAK,CAAC,SAAS,GAiEhD;AAjEY,oCAAY","file":"demo/pages/CalendarPage/CalendarPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  PropertiesTableSet,\r\n  ComponentPage\r\n} from '../../components/index';\r\n\r\nimport { CalendarButtonExample } from './examples/Calendar.Button.Example';\r\nimport { CalendarInlineExample } from './examples/Calendar.Inline.Example';\r\nimport { getPageRouteFromState } from '../../utilities/pageroute';\r\nimport { AppState } from '../../components/App/AppState';\r\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\r\n\r\nconst CalendarButtonExampleCode = require('./examples/Calendar.Button.Example.tsx') as string;\r\nconst CalendarInlineExampleCode = require('./examples/Calendar.Inline.Example.tsx') as string;\r\n\r\nexport class CalendarPage extends React.Component<IComponentDemoPageProps, any> {\r\n  private _url: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'DatePicker');\r\n  }\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Calendar'\r\n        componentName='CalendarExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='Inline Calendar' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample isMonthPickerVisible={ false } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with month picker' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample isMonthPickerVisible={ true } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Calendar launched from a button' code={ CalendarButtonExampleCode }>\r\n              <CalendarButtonExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet componentName='Calendar' />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The calendar component allows a user to browse through a calendar and pick a date value.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use the control as a single entity.</li>\r\n              <li>Set the default date to the current date unless a specific date is required for context (e.g. the date of the conference).</li>\r\n              <li>The control is designed to resize relative to available screen width. Allow it to render in either wide or narrow as appropriate.</li>\r\n              <li>When the control is engaged, the Calendar renders as a flyout and has defined widths (300px -narrow and 440px â€“ wide). Plan your UI implementation accordingly.</li>\r\n              <li>The control renders date in a specific format. If allowing for manual entry of date, provide helper text in the appropriate format.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't attempt to break apart year from month/day selectors. If granularity is required, use the Dropdown control or something similar.</li>\r\n              <li>Don't attempt to force resize the control in any way.</li>\r\n              <li>Don't force the control to render one mode vs. the other (year or month/day)</li>\r\n              <li>The flyout selector is a light dismiss control. Don't modify this behavior in any way.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        route={ this._url }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}