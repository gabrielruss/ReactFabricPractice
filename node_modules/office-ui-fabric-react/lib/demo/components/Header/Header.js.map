{"version":3,"sources":["demo/components/Header/Header.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAAoD;AAEpD,0DAGiC;AACjC,mEAAkE;AAClE,gDAAmE;AACnE,uFAAsG;AACtG,yBAAuB;AAqBvB,IAAa,MAAM;IAAS,0BAA2C;IACrE,gBAAY,KAAmB;QAA/B,YACE,kBAAM,KAAK,CAAC,SAWb;QATC,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACjD,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAC7C,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACnD,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAEjD,KAAI,CAAC,KAAK,GAAG;YACX,WAAW,EAAE,IAAI;YACjB,YAAY,EAAE,kBAAM,EAAE;SACvB,CAAC;;IACJ,CAAC;IAEM,uBAAM,GAAb;QACM,IAAA,eAAiD,EAA/C,gBAAK,EAAE,wBAAS,EAAE,kCAAc,CAAgB;QAChD,IAAA,oCAAW,CAAgB;QAEjC,sDAAsD;QACtD,EAAE,CAAC,CAAC,cAAc,IAAI,mCAAc,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3C,SAAS,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAC,QAAQ;gBACnB,CAAC,cAAc,IAAI,mCAAc,CAAC,KAAK,CAAC,IAAI,CAC5C,gCAAQ,SAAS,EAAC,eAAe,EAAC,OAAO,EAAG,IAAI,CAAC,YAAY;oBAC3D,2BAAG,SAAS,EAAC,kCAAkC,GAAG,CAC3C,CACV;gBACD,6BAAK,SAAS,EAAC,4CAA4C;oBACzD,2BAAG,SAAS,EAAC,sBAAsB,GAAG;oBACpC,KAAK,CACH;gBACN,6BAAK,SAAS,EAAC,gBAAgB;oBAC7B,oBAAC,qBAAS,IAAC,SAAS,EAAG,8BAAkB,CAAC,UAAU,IAChD,SAAS,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,SAAS,IAAK,OAAA,CACnC,2BAAG,GAAG,EAAG,SAAS,EAAG,SAAS,EAAC,kCAAkC,EAAC,IAAI,EAAG,IAAI,CAAC,GAAG,IAAK,IAAI,CAAC,IAAI,CAAM,CACtG,EAFoC,CAEpC,CAAC,CAAC,MAAM,CAAC;wBACR,gCAAQ,GAAG,EAAC,cAAc,EAAC,SAAS,EAAC,eAAe,EAAC,OAAO,EAAG,IAAI,CAAC,YAAY;4BAC9E,2BAAG,SAAS,EAAC,2BAA2B,GAAG,CACpC;qBACV,CAAC,CACQ,CACR,CACF;YACJ,WAAW,GAAG,CACd,oBAAC,+BAAc,IACb,KAAK,EAAG,WAAW,CAAC,KAAK,EACzB,aAAa,EAAG,IAAI,EACpB,aAAa,EAAG,WAAW,CAAC,MAAM,EAClC,eAAe,EAAG,iCAAe,CAAC,cAAc,EAChD,QAAQ,EAAG,CAAC,EACZ,SAAS,EAAG,IAAI,CAAC,UAAU,GAAK,CACnC,GAAG,CAAC,IAAI,CAAC,CACN,CACP,CAAC;IACJ,CAAC;IAEO,6BAAY,GAApB,UAAqB,EAAiC;QAChD,IAAA,eAAsD,EAApD,kDAAsB,EAAE,gCAAa,CAAgB;QAE3D,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC3B,sBAAsB,CAAC,CAAC,aAAa,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAEO,6BAAY,GAApB,UAAqB,EAAiC;QAC9C,IAAA,oCAAW,CAAgB;QAEjC,IAAI,CAAC,QAAQ,CAAC;YACZ,WAAW,EAAE,WAAW,GAAG,IAAI,GAAG;gBAChC,MAAM,EAAE,EAAE,CAAC,aAA4B;gBACvC,KAAK,EAAE,IAAI,CAAC,mBAAmB,EAAE;aAClC;SACF,CAAC,CAAC;IACL,CAAC;IAEO,oCAAmB,GAA3B;QACE,MAAM,CAAC,CAAC;gBACN,GAAG,EAAE,OAAO;gBACZ,IAAI,EAAE,gBAAa,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,GAAG,KAAK,CAAE;gBAC5D,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,IAAI,CAAC,aAAa;aAC5B,CAAC,CAAC;IACL,CAAC;IAEO,8BAAa,GAArB,UAAsB,EAAiC;QAC/C,IAAA,sCAAY,CAAgB;QAElC,kBAAM,CAAC,CAAC,YAAY,CAAC,CAAC;QAEtB,IAAI,CAAC,QAAQ,CAAC;YACZ,YAAY,EAAE,CAAC,YAAY;YAC3B,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;IACL,CAAC;IAEO,2BAAU,GAAlB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;IACL,CAAC;IACH,aAAC;AAAD,CAzGA,AAyGC,CAzG2B,KAAK,CAAC,SAAS,GAyG1C;AAzGY,MAAM;IADlB,uCAAkB;GACN,MAAM,CAyGlB;AAzGY,wBAAM","file":"demo/components/Header/Header.js","sourcesContent":["import * as React from 'react';\r\nimport { getRTL, setRTL } from '../../../Utilities';\r\nimport { } from '../../../utilities/decorators/withResponsiveMode';\r\nimport {\r\n  ContextualMenu,\r\n  IContextualMenuItem\r\n} from '../../../ContextualMenu';\r\nimport { DirectionalHint } from '../../../common/DirectionalHint';\r\nimport { FocusZone, FocusZoneDirection } from '../../../FocusZone';\r\nimport { withResponsiveMode, ResponsiveMode } from '../../../utilities/decorators/withResponsiveMode';\r\nimport './Header.scss';\r\n\r\nexport interface IHeaderProps {\r\n  title: string;\r\n  sideLinks: { name: string, url: string }[];\r\n\r\n  isMenuVisible: boolean;\r\n  onIsMenuVisibleChanged?: (isMenuVisible: boolean) => void;\r\n\r\n  responsiveMode?: ResponsiveMode;\r\n}\r\n\r\nexport interface IHeaderState {\r\n  contextMenu?: {\r\n    target: HTMLElement,\r\n    items: IContextualMenuItem[]\r\n  };\r\n  isRTLEnabled?: boolean;\r\n}\r\n\r\n@withResponsiveMode\r\nexport class Header extends React.Component<IHeaderProps, IHeaderState> {\r\n  constructor(props: IHeaderProps) {\r\n    super(props);\r\n\r\n    this._onGearClick = this._onGearClick.bind(this);\r\n    this._onDismiss = this._onDismiss.bind(this);\r\n    this._onRTLToggled = this._onRTLToggled.bind(this);\r\n    this._onMenuClick = this._onMenuClick.bind(this);\r\n\r\n    this.state = {\r\n      contextMenu: null,\r\n      isRTLEnabled: getRTL()\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { title, sideLinks, responsiveMode } = this.props;\r\n    let { contextMenu } = this.state;\r\n\r\n    // In medium and below scenarios, hide the side links.\r\n    if (responsiveMode <= ResponsiveMode.large) {\r\n      sideLinks = [];\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className='Header'>\r\n          { (responsiveMode <= ResponsiveMode.large) && (\r\n            <button className='Header-button' onClick={ this._onMenuClick }>\r\n              <i className='ms-Icon ms-Icon--GlobalNavButton' />\r\n            </button>\r\n          ) }\r\n          <div className='Header-title ms-font-xl ms-fontColor-white'>\r\n            <i className='ms-Icon ms-Icon--Org' />\r\n            { title }\r\n          </div>\r\n          <div className='Header-buttons'>\r\n            <FocusZone direction={ FocusZoneDirection.horizontal }>\r\n              { sideLinks.map((link, linkIndex) => (\r\n                <a key={ linkIndex } className='Header-button ms-fontColor-white' href={ link.url }>{ link.name }</a>\r\n              )).concat([\r\n                <button key='headerButton' className='Header-button' onClick={ this._onGearClick }>\r\n                  <i className='ms-Icon ms-Icon--Settings' />\r\n                </button>\r\n              ]) }\r\n            </FocusZone>\r\n          </div>\r\n        </div>\r\n        { contextMenu ? (\r\n          <ContextualMenu\r\n            items={ contextMenu.items }\r\n            isBeakVisible={ true }\r\n            targetElement={ contextMenu.target }\r\n            directionalHint={ DirectionalHint.bottomAutoEdge }\r\n            gapSpace={ 5 }\r\n            onDismiss={ this._onDismiss } />\r\n        ) : (null) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onMenuClick(ev: React.MouseEvent<HTMLElement>) {\r\n    let { onIsMenuVisibleChanged, isMenuVisible } = this.props;\r\n\r\n    if (onIsMenuVisibleChanged) {\r\n      onIsMenuVisibleChanged(!isMenuVisible);\r\n    }\r\n  }\r\n\r\n  private _onGearClick(ev: React.MouseEvent<HTMLElement>) {\r\n    let { contextMenu } = this.state;\r\n\r\n    this.setState({\r\n      contextMenu: contextMenu ? null : {\r\n        target: ev.currentTarget as HTMLElement,\r\n        items: this._getOptionMenuItems()\r\n      }\r\n    });\r\n  }\r\n\r\n  private _getOptionMenuItems(): IContextualMenuItem[] {\r\n    return [{\r\n      key: 'isRTL',\r\n      name: `Render in ${this.state.isRTLEnabled ? 'LTR' : 'RTL'}`,\r\n      icon: 'Settings',\r\n      onClick: this._onRTLToggled\r\n    }];\r\n  }\r\n\r\n  private _onRTLToggled(ev: React.MouseEvent<HTMLElement>) {\r\n    let { isRTLEnabled } = this.state;\r\n\r\n    setRTL(!isRTLEnabled);\r\n\r\n    this.setState({\r\n      isRTLEnabled: !isRTLEnabled,\r\n      contextMenu: null\r\n    });\r\n  }\r\n\r\n  private _onDismiss() {\r\n    this.setState({\r\n      contextMenu: null\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}